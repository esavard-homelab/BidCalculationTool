name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  frontend-tests:
    name: Frontend Tests & Quality
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Lint
        working-directory: frontend
        run: npm run lint

      - name: Unit tests
        working-directory: frontend
        run: npm run test:unit:ci

      - name: Test coverage
        working-directory: frontend
        run: npm run test:coverage

      - name: Type check
        working-directory: frontend
        run: npm run type-check

      - name: Build
        working-directory: frontend
        run: npm run build

  backend-tests:
    name: Backend Tests & Quality
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore backend/BidCalculationTool.sln

      - name: Build
        run: dotnet build backend/BidCalculationTool.sln --no-restore

      - name: Test with coverage
        run: dotnet test backend/BidCalculationTool.sln --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [ frontend-tests, backend-tests ]
  
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
  
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
  
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
  
      - name: Install SonarCloud scanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          export PATH="$PATH:/root/.dotnet/tools"
          echo "/root/.dotnet/tools" >> $GITHUB_PATH
  
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci
  
      - name: Begin SonarCloud analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          export PATH="$PATH:/root/.dotnet/tools"
          dotnet-sonarscanner begin \
          /k:"esavard-homelab_BidCalculationTool" \
          /o:"esavard-homelab" \
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.scanner.skipJreProvisioning=true \
          /d:sonar.projectBaseDir="." \
          /d:sonar.sources="backend/src,frontend/src" \
          /d:sonar.tests="backend/tests,frontend/src/test" \
          /d:sonar.exclusions="**/node_modules/**,**/bin/**,**/obj/**,**/*.d.ts,**/coverage/**" \
          /d:sonar.cs.dotcover.reportsPaths="coverage/**/coverage.cobertura.xml" \
          /d:sonar.javascript.lcov.reportPaths="frontend/coverage/lcov.info"
  
      - name: Build and test
        run: |
          dotnet build backend/BidCalculationTool.sln
          dotnet test backend/BidCalculationTool.sln --collect:"XPlat Code Coverage"
  
      - name: Frontend tests for SonarCloud
        working-directory: frontend
        run: npm run test:coverage
  
      - name: End SonarCloud analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          export PATH="$PATH:/root/.dotnet/tools"
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"