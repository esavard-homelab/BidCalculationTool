name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev-* ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    name: Backend Tests & Coverage
    outputs:
      coverage: ${{ steps.backend-coverage.outputs.coverage }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore backend/BidCalculationTool.sln
    
    - name: Build
      run: dotnet build backend/BidCalculationTool.sln --no-restore --configuration Release
    
    - name: Run tests with coverage
      run: |
        cd backend
        dotnet test test/BidCalculationTool.Test/BidCalculationTool.Test.csproj \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory "../coverage-reports" \
          --logger "trx;LogFileName=backend-test-results.trx"
    
    - name: Generate backend coverage report
      run: |
        dotnet tool install --global dotnet-reportgenerator-globaltool || true
        reportgenerator \
          -reports:"coverage-reports/**/coverage.cobertura.xml" \
          -targetdir:"coverage-reports/backend-html" \
          -reporttypes:"JsonSummary;Html" \
          -sourcedirs:"backend/src"
    
    - name: Extract backend coverage
      id: backend-coverage
      run: |
        COVERAGE=$(grep -oP '"linecoverage":\s*\K[0-9.]+' coverage-reports/backend-html/Summary.json || echo "0")
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "Backend Coverage: $COVERAGE%" >> $GITHUB_STEP_SUMMARY
    
    - name: Upload backend coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: coverage-reports/
    
    - name: Publish backend test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: '.NET Test Results'
        path: 'coverage-reports/**/*.trx'
        reporter: dotnet-trx
        fail-on-error: false

  frontend-tests:
    runs-on: ubuntu-latest
    name: Frontend Tests & Coverage
    outputs:
      coverage: ${{ steps.frontend-coverage.outputs.coverage }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run tests with coverage
      run: |
        cd frontend
        npm run test:coverage
    
    - name: Extract frontend coverage
      id: frontend-coverage
      run: |
        cd frontend
        # Check if coverage summary exists in text format first
        if [ -f "coverage/coverage-summary.txt" ]; then
          COVERAGE=$(grep -oP 'Lines\s+:\s+\K[0-9.]+' coverage/coverage-summary.txt || echo "0")
        else
          # Parse from coverage-final.json by calculating total coverage
          COVERAGE=$(node -e "
            const fs = require('fs');
            try {
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-final.json', 'utf8'));
              let totalLines = 0;
              let coveredLines = 0;
              
              Object.values(coverage).forEach(file => {
                if (file.s && file.statementMap) {
                  const statements = Object.keys(file.statementMap).length;
                  const covered = Object.values(file.s).filter(count => count > 0).length;
                  totalLines += statements;
                  coveredLines += covered;
                }
              });
              
              const percentage = totalLines > 0 ? ((coveredLines / totalLines) * 100).toFixed(1) : 0;
              console.log(percentage);
            } catch(e) {
              console.log('0');
            }
          ")
        fi
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "Frontend Coverage: $COVERAGE%" >> $GITHUB_STEP_SUMMARY
    
    - name: Upload frontend coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/
    
    - name: Publish frontend test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: 'Frontend Test Results'
        path: 'frontend/coverage/junit.xml'
        reporter: java-junit
        fail-on-error: false

  coverage-summary:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    name: Coverage Summary
    
    steps:
    - name: Generate coverage summary
      run: |
        echo "# 📊 Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Coverage | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|----------|--------|" >> $GITHUB_STEP_SUMMARY
        
        BACKEND_COV="${{ needs.backend-tests.outputs.coverage }}"
        FRONTEND_COV="${{ needs.frontend-tests.outputs.coverage }}"
        
        # Ensure values are not empty and are numeric
        BACKEND_COV=${BACKEND_COV:-0}
        FRONTEND_COV=${FRONTEND_COV:-0}
        
        # Function to determine status
        get_status() {
          local coverage=$1
          if [ -z "$coverage" ] || ! [[ "$coverage" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
            echo "❌ No Data"
            return
          fi
          
          if (( $(echo "$coverage >= 80" | bc -l 2>/dev/null || echo "0") )); then
            echo "✅ Excellent"
          elif (( $(echo "$coverage >= 60" | bc -l 2>/dev/null || echo "0") )); then
            echo "⚠️ Good"
          else
            echo "❌ Needs Improvement"
          fi
        }
        
        BACKEND_STATUS=$(get_status "$BACKEND_COV")
        FRONTEND_STATUS=$(get_status "$FRONTEND_COV")
        
        echo "| Backend | ${BACKEND_COV}% | ${BACKEND_STATUS} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend | ${FRONTEND_COV}% | ${FRONTEND_STATUS} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "_Thresholds: 80%+ Excellent, 60%+ Good, <60% Needs Improvement_" >> $GITHUB_STEP_SUMMARY
