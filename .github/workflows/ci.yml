name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    name: Backend Tests & Coverage
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore backend/BidCalculationTool.sln

      - name: Clean old coverage files
        run: |
          rm -rf ./coverage
          rm -rf ./coverage-report

      - name: Run tests with coverage and results
        run: |
          dotnet test backend/test/BidCalculationTool.Test/BidCalculationTool.Test.csproj \
            --results-directory coverage \
            --collect:"XPlat Code Coverage" \
            --logger "trx;LogFileName=test-results.trx" \
            -- \
            DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

      - name: Install reportgenerator tool
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Generate test report and coverage reports
        run: |
          reportgenerator \
            -reports:"coverage/**/coverage.opencover.xml" \
            -targetdir:"coverage-report" \
            -reporttypes:"Cobertura;HtmlInline_AzurePipelines;Badges;JsonSummary" \
            -sourcedirs:"backend/src"

      - name: Upload coverage artifact (HTML report)
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-report
          path: coverage-report

      - name: Publish Test Results (TRX)
        uses: dorny/test-reporter@v1
        with:
          name: .NET Test Results
          path: coverage/test-results.trx
          reporter: dotnet-trx

      - name: Write Test Summary to Build Summary (Markdown)
        env:
          SUMMARY_PATH: coverage-report/Summary.json
        run: |
          echo "## ✅ Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Test results: visible in [Checks tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Code coverage report: [Download HTML report → Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 Detailed TRX results: embedded in this build as a GitHub Check" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ☂️ Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Module | Covered lines | Total lines | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|---------------|-------------|----------|" >> $GITHUB_STEP_SUMMARY

          if [ -f "$SUMMARY_PATH" ]; then
            jq -r '.coverage.assemblies[] | "| \(.name) | \(.coveredlines) | \(.coverablelines) | \(.coverage)% |"' "$SUMMARY_PATH" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Coverage data | Not available | Not available | Processing... |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "ℹ️ *Coverage details will be available in the Codecov report shortly.*" >> $GITHUB_STEP_SUMMARY
          fi
          
